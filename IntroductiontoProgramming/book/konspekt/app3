Сегодня тема несложная, но интересная. Так что, приготовьтесь. Сегодня будем разбираться с тем, что такое блоки в Ruby и как мы можем их использовать для создания гибких приложений.

Мы используем блоки повсюду. Это код, который находится либо между {...}, либо между do..end. Пример блоков:

(1..10).each do |i|
  puts i
end

(1..10).each { |i| puts i }
По правилам оформления кода, если блок можно написать в одну строку - его заворачивают в {...}, а если код блока занимает более одной строки - используют do..end.

Методы могут принимать блоки и вызывать их, когда это необходимо. Чтобы вызвать блок внутри метода, используется ключевое слово yield. Например:

def foo
  puts "Some foo code"
  yield
  puts "Still there"
end

foo { puts "Hi, i'm block" }

Результатом выполнения этого кода будут следующие строки:

Some foo code
Hi, i'm block
Still there
Давайте разберемся, почему мы получили именно такой результат. Мы вызвали метод foo и передали ему блок. Далее, в самом методе foo мы вызвали блок, который передали воспользовавшись yield. Таким образом, можно представить, что код foo отработал в такой очередности:

В блоки, которые вызывает метод, можно передавать параметры. Этот пример предлагаю рассмотреть подробнее:

def log(str)
  puts "LOGGER: #{yield(str)}"
end

log("some data") do |str| 
  "My custom format of #{str}"
end
Результат выполнения:

LOGGER: My custom format of some data
Давайте разберемся как мы получили такой результат. Во-первых, метод log принимает строку которую мы хотим залогировать. Во-вторых, он принимает блок, который позволяет пользователю самому определить, как он хочет задекорировать строку которую нужно залогировать.

Получается так, что мы вызываем метод log со строкой, которую нужно добавить в лог и передаем блок, который ее декорирует.

Внутри метода log мы выводим лог, и вызываем блок со строкой, которую хотим добавить: yield(str).

Плюсом такого подхода является то, что мы оставляем наш логгер весьма гибким. Так, как пользователь сам может определить как задекорировать строку.

Возникает вопрос: что случится если вызвать метод log без блока:

log("soma data") # => `log': no block given (yield) (LocalJumpError)
Как видим - возникает ошибка. Наш метод обязательно должен принимать блок, так как мы вызываем yield. В Ruby есть возможность проверить, был ли метод вызван с блоком или нет. Это, в свою очередь, позволяет делать блок опциональным параметром.

В нашем примере с логгером, мы можем сделать какой-то дефолтный форматтер, но в то же время сохранить возможность принимать блоки для кастомного форматирования:

def log(str)
  return "LOGGER: #{yield(str)}" if block_given?

  "BASIC LOGGER: #{str}"
end

puts log("soma basic data") # => BASIC LOGGER: soma basic data

result = log("soma data") do |str| 
  "My custom format of #{str}"
end

puts result # => LOGGER: My custom format of soma data

Теперь наш метод достаточно гибкий. Он не только позволяет пользователю передавать кастомный форматтер в блоке, но и имеет базовый форматтер, который отработает если блок не передать. Проверить передали ли блок в метод можно воспользовавшись методом block_given?. Если нам передали блок - мы спокойно вызываем этот блок воспользовавшись yield, если нет - пользуемся дефолтным форматтером.

Хочу показать еще несколько техник, которые могут быть полезны в работе.

Данный подход позволяет установить изначальные значения для обьекта очень наглядным способом:

class User
  attr_accessor :first_name, :last_name

  def initialize
    yield(self)
  end
end

user = User.new do |u|
  u.first_name = "Adrian"
  u.last_name = "Lewis"
end

puts "#{user.first_name} #{user.last_name}" # => Adrian Lewis

Самое интересное в этом классе - это метод initialize, который просто возвращает в блок себя же (self). И в блоке у вас есть доступ к экземпляру класса, который вы создаете.

Подобную идею можно применить и для конфигурирования ваших экземпляров классов. Например, у нас есть логгер, у которого есть набор дефолтных настроек. Но мы хотим создать возможность легко их изменять и создавать логгеры с такими настройками, которые нужны нам.

require 'ostruct'

class Logger
  attr_reader :config

  def initialize
    @config = OpenStruct.new

    config.prefix = "LOGGER"
    config.time_format = "%Y.%m.%d"

    yield(config) if block_given?
  end

  def log(str)
    "#{Time.now.strftime(config.time_format)} #{config.prefix}: #{str}"
  end
end

l = Logger.new
puts l.log("With standard config") # => 2016.05.22 LOGGER: With standard config

l = Logger.new do |config|
  config.time_format = "%Y-%d-%m"
  config.prefix = "Custom"
end
puts l.log("Own logger") # => 2016-22-05 Custom: Own logger

Этот пример мне очень нравится. Наш логгер очень гибкий. Он не только позволяет пользователю пользоваться стандартными настройками, но и определять конфигурацию на момент создания.

Это достигается тем, что при создании логгера мы можем передать блок, который принимает параметр config - конфигурацию. Одна строка yield(config) if block_given? значительно расширила возможности логгера и сделала его более гибким.