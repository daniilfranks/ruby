Refinements были добавлены в Ruby, чтобы сделать более безопасным такой некрасивый, но популярный подход как Monkey Patching.

Начнем, пожалуй с того что такое Monkey Patching и почему это плохо. Например, у нас есть класс User, у которого определен метод to_s:

class User

  attr_reader :name

  def initialize(name)
    @name = name
  end

  def to_s
    "Name: #{name}"
  end

end

u = User.new("John")
puts u # => Name: John
И все работает хорошо, пока в какой-то момент ваш коллега не решит в другом месте приложения сделать следующее:

class User
  def to_s
    "User name is #{name}"
  end
end
Да, благодаря гибкости Ruby вы можете изменить класс в любом месте приложения. И теперь, как вы уже догадались, результат выполнения метода to_s будет другим:

u = User.new("John")
puts u # => User name is John    

И хорошо, если команда у вас небольшая и можно уследить за подобными казусами... Но плохо если такое случается с библиотеками, которые вы подключаете и там нет правильного разделения на модули. Отследить такие случаи весьма проблематично.

Я вам очень не рекомендую использовать Monkey Patching. А там где это неизбежно - использовать Refinements.

Давайте представим, что во всех местах где мы приводим User к строке нам нужно получить: "User name is John", но в нескольких местах нам все же необходима строка в формате "Name: John".

Для этого в классе определяем основную имплементацию:

class User

  attr_reader :name

  def initialize(name)
    @name = name
  end

  def to_s
    "User name is #{name}"
  end

end
А для альтернативной имплементации создаем модуль с refinement:

module RefinedUser

  refine User do

    def to_s
      "Name: #{name}"
    end

  end

end

Теперь в том месте, где нам нужно получить альтернативную имплементацию User#to_s, мы делаем using модуля RefinedUser:

class UserDecorator
  using RefinedUser

  def self.decorated_user
    puts User.new("John").to_s
  end
end

UserDecorator.decorated_user # => Name: John
Класс User будет иметь альтернативную имплементацию метода to_s только в рамках класса UserDecorator, благодаря using RefinedUser. Этот код не распространится дальше той области видимости, в котором использован RefinedUser. Код, конечно, очень схематичен, но, надеюсь, идея понятна.

Выносите всю кастомную имплементацию из классов в Refinement'ы и подключайте их там, где необходимо. Это более безопасный путь, нежели делать Monkey Patch для класса на уровне всего приложения.