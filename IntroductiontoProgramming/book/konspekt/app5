Public, Private и Protected методы в Ruby

Да-да, об этой теме говорили уже много раз и все знают что методы в Ruby могут быть public, private и protected. Но одно дело знать какими они могут быть, а другое дело понимать разницу между private и protected, например. Поэтому сегодня предлагаю разобраться в чем же разница.

Начнем с самого простого, а именно с public-методов.

public
По-умолчанию все методы в Ruby публичны. Это означает, что если мы создаем метод hi у класса User, он автоматически будет доступен для вызова в экземпляре класса User:

class User
  def hi
    "hi"
  end
end

u = User.new
puts u.hi # => hi

Этот очень простой пример показывает: если мы не укажем, что метод приватный (private) или защищенный (protected) - по-умолчанию он будет публичным (public).

private
Далее рассмотрим как сделать метод приватным. В этом нам поможет метод private. Если в него не передать никаких параметров, то все методы которые идут после него становятся приватными:

class User

  def hi
    "hi"
  end

  def hello
    "hello"
  end

  private

  def secret
    "secret"
  end

  def internal
    "internal"
  end
end

u = User.new
u.hi # => "hi"
u.hello # => "hello"
u.secret # => error: private method `secret' called
u.internal # => error: private method `internal' called
Как видим, методы secret и internal, которые идут после private - недоступны для экземпляра класса User. При попытке их вызова получаем ошибку:

private method `secret' called for #User:0x007f9a8284bd30 (NoMethodError)
Если вам нужно посмотреть список приватных методов обьекта, можно воспользоваться методом private_methods:

u = User.new
puts u.private_methods(false).inspect # => [:secret, :internal]
Параметр false указывает на то, что мы хотим посмотреть только те приватные методы, которые определены в классе User.

Еще один способ сделать метод приватным - это явно передать название метода в метод private. Такой подход используется гораздо реже, но о нем нужно помнить. Наш пример можно переписать вот так:

class User

  def hi
    "hi"
  end

  def hello
    "hello"
  end

  def secret
    "secret"
  end

  def internal
    "internal"
  end

  private :secret, :internal
end

u = User.new
u.private_methods(false) # => [:secret, :internal]

Строкой private :secret, :internal мы указываем какие именно методы мы хотим сделать приватными. Но, как я уже сказал выше, подобный подход встречается гораздо реже. Чаще всего пишут метод private и под ним размещают методы, которые должны быть приватными.

Итак, приватные методы мы не можем использовать снаружи, но мы все также можем использовать эти методы внутри класса:

class User

  def hi
    "hi, i'll not tell you the #{secret}"
  end

  private

  def secret
    "secret"
  end
end

u = User.new
u.hi # => hi, i'll not tell you the secret


В методе hi мы легко можем вызвать метод secret и правильно вывести его содержимое.

Возникает вопрос - зачем нам делать какие-то методы приватными? Что плохого если все методы будут публичны?

Ответ кроется в правильном подходе к дизайну классов. При проектировании классов, нужно продумывать красивые и понятные интерфейсы: методы и их параметры. Публичные методы и определяют интерфейс класса. А приватные методы отвечают за какую-то совсем внутреннюю имплементацию и их незачем показывать и делать доступными. Не забывайте следить за тем, какие методы публичны в вашем классе. Может некоторые из них можно скрыть, сделав их приватными.

Вообще, при разработке классов нужно стараться писать код так, чтобы изменение публичных методов было самым последним что вам придется делать. Внутреннюю имплементацию можно менять сколько угодно раз, так как это не влечет за собой изменения в других частях приложения. Но, стоит вам изменить какой-то публичный метод - и вам сразу же придется идти по всему приложению и искать места в которых этот метод использовался и менять его сигнатуру.

Вернемся к приватным методам и рассмотрим еще одну особенность. На первый взгляд это прозвучит немного сложно, но: приватные методы не могут быть вызваны с явным указанием "получателя" - обьекта из которого они вызываются. Даже если передать текущий класс как self.

Эту особенность проще показать на примере:


class User

  def say_secret_with_self
    self.secret
  end

  def say_secret
    secret
  end

  private

  def secret
    "secret"
  end
end

u = User.new
u.say_secret_with_self # => `say_secret_with_self': private method `secret' called for #User:0x007ffdcc037e48 (NoMethodError)
u.say_secret # => "secret"

Если внутри класса мы попытаемся вызвать приватный метод как self.secret - получим такую же ошибку, как и при попытке вызвать приватный метод извне: private methodsecret' called for #User:0x007ffdcc037e48`.

Но вот если внутри класса вызвать просто метод secret - он отработает. Таким образом, приватные методы можно вызывать только без явного указания обьекта из которого они вызываются. В нашем случае это просто метод secret, а не self.secret.

protected
Надеюсь последний пример вас не слишком напугал и вы все-же дошли до самой интересной части статьи :)

Итак, что мы знаем о protected-методах: они не доступны для внешнего мира так же как и private и обьявлять их можно используя метод protected:

class User

  def secret
    "secret"
  end

  protected :secret
end

u = User.new
u.secret # => protected method `secret' called for #User:0x007fc7409384d8 (NoMethodError)
Или более привычным способом:

class User

  protected

  def secret
    "secret"
  end
end

u = User.new
u.secret # => protected method `secret' called for #User:0x007fc7409384d8 (NoMethodError)
Напрашивается вопрос - чем же protected отличается от private?

Отличие есть и оно заключается в том, что protected-методы, в отличие от private поддерживают явное указание класса из которого они вызываются:

class User

  def say_secret_with_self
    self.secret
  end

  protected

  def secret
    "secret"
  end
end

u = User.new
u.say_secret_with_self # => "secret"

работает.

Это значит что в рамках класса User мы можем вызвать secret у любого экземпляра класса User.

Давайте рассмотрим пример и попытаемся в нем разобраться:

class User

  attr_reader :name

  def initialize(name)
    @name = name
  end

  def ==(other_user)
    self.secret == other_user.secret
  end

  protected

  def secret
    "#{name}.#{name.length}"
  end
end

bob = User.new("Bob")
john = User.new("John")
bob == john # => false

Итак, теперь класс User принимает параметр name. Также, мы определили метод == который будем использовать для сравнения двух обьектов. Эта проверка заключается в том, чтобы сравнить секреты двух юзеров - текущего и того, которого мы получаем в виде параметра other_user. Так, как protected методы позволяют нам указывать для какого обьекта мы вызываем метод - мы легко этим пользуемся: self.secret == other_user.secret. Заметьте, что в классе User мы имеем доступ к методу secret и у other_user.

Метод secret я тоже немного изменил. Он просто формирует секрет из имени и его длинны, для Боба это будет: "Bob.3", для Джона: "John.4". Имплементация не так важна, гораздо интереснее то, что к защищенному методу secret мы можем получить доступ внутри класса User, плюс ко всему мы можем указывать для какого обьекта мы хотим вызвать protected метод.

Вы это сделали! Дочитали эту длинную статью до конца! Public, protected и private методы - это весьма важная тема, в которой нужно один раз разобраться и забыть. Со временем вы просто будете использовать их не задумываясь.

Ну, а в качестве благодарности за то, что прочли статью до конца, хочу упомянуть один хак в нашем чудо-Ruby, который все же позволяет вызывать private/protected методы у обьектов :)

Это можно сделать вызвав метод не напрямую, а воспользовавшись методом send:

class User

  private

  def secret
    "sic! it's a secret"
  end
end

u = User.new
u.send(:secret)