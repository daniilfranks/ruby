Всем привет. Тема сегодня очень интересная - Dependency Injection в Ruby. На русский переводится как "внедрение зависимости". Но, чтобы понять чем хороша идея внедрения зависимостей, нужно для начала разобраться что такое зависимость и почему это плохо.

Как говорит Sandi Metz (чью книгу Practical Object-Oriented Design in Ruby я очень рекомендую) - каждая зависимость в вашем классе - это клей, который склеивает части приложения. Иногда, без него не обойтись никак, но если его слишком много - вы получаете монолитную систему, которую сложно расширять.

Многие говорят, что основная идея в ООП это далеко не Наследование, Полиморфизм и Инкапсуляция, а управление зависимостями.

Давайте посмотрим как выглядят зависимости в коде:

class User
  attr_reader :email

  def initialize(email)
    @email = email
  end

  def send_notification
    UserMailer.send_email(email)
  end
end
Из этого простого примера видно, что класс User теперь зависит от класса UserMailer. Класс User полагается на то, что класс UserMailer существует и отвечает на send_email.

Для небольших приложений подобный подход не станет катастрофой, но приложения растут, появляются все новые и новые задачи и вам нужна возможность легко на них реагировать.

Зависимости в коде - это то, за чем нужно следить и чего нужно избегать.

Сегодня, на примере, хочу показать как перейти от явной зависимости в коде к Dependency Injection. Также, рассмотрим плюсы, которые получаем от DI.

Итак, наша задача написать генератор отчетов. Для начала нам говорят, что формат csv вполне устроит заказчика.

Рассмотрим пример возможной имплементации.

Данные будем брать из класса DataSource:

class DataSource
  def data
    [
      { user: 'Adrian Lewis', email: 'adrian@lewis.com' },
      { user: 'Phil Taylor', email: 'phil@taylor.com' }
    ]
  end
end
Для простоты, я явно указал структуру данных, но в реальном приложении это могут быть и данные из Базы Данных, или сторонних сервисов. Это не так важно, так как нам просто нужны данные для отчета.

Также, напишем небольшой класс, который будет форматировать данные в csv:

class CsvDataFormatter
  def format(data)
    return "" if data.empty?

    csv = data.first.keys.join(",") + "\n"
    data.each { |hsh| csv += hsh.values.join(",") + "\n" }

    csv
  end
end
В тонкости работы этих двух классов можно особо не вникать, главное понимать, что у нас есть класс с данными и возможность их форматировать в csv. Если мы передадим в CsvDataFormatter данные из DataSource, получим валидный csv:

user,email
Adrian Lewis,adrian@lewis.com
Phil Taylor,phil@taylor.com
Теперь можем перейти к написанию генератора отчетов, который будет брать данные из DataSource и отдавать на форматирование в CsvDataFormatter:

class ReportGenerator

  attr_reader :data_source, :formatter

  def initialize
    @data_source = DataSource.new
    @formatter = CsvDataFormatter.new
  end

  def generate
    formatter.format(data_source.data)
  end
end

report_generator = ReportGenerator.new
report_generator.generate # => returns csv data
Обратите внимание на метод initialize в классе ReportGenerator: он просто принуждает нас использовать классы DataSource и CsvDataFormatter. Явно создавая зависимости класса ReportGenerator на DataSource и CsvDataFormatter.

Давайте подумаем, как можно улучшить данный код. Как избавиться от явного указания классов с которыми мы хотим работать?

На помощь приходит Dependency Injection. Код генератора мог бы выглядеть вот так:

class ReportGenerator

  attr_reader :data_source, :formatter

  def initialize(formatter = CsvDataFormatter.new, data_source = DataSource.new)
    @formatter = formatter
    @data_source = data_source
  end

  def generate
    formatter.format(data_source.data)
  end
end
Обратите внимание на небольшое изменение в методе initialize. Оно выглядит минорным, но на самом деле делает систему намного динамичнее.

В данном случае мы не "хардкодим" названия классов внутри метода, а внедряем нашу зависимость через метод initialize.

Таким образом, если мы вызываем ReportGenerator.new без аргументов, он по-умолчанию сгенерирует csv. Но, если мы захотим сгенерировать отчет в JSON, мы легко можем написать форматтер и передать его в ReportGenerator.new:

require 'json'

class JsonDataFormatter
  def format(data)
    data.to_json
  end
end

ReportGenerator.new(JsonDataFormatter.new).generate # [{"user":"Adrian Lewis","email":"adrian@lewis.com"},{"user":"Phil Taylor","email":"phil@taylor.com"}]
Как же легко мы добавили возможность экспорта данных в JSON! А все благодаря тому, что используя Dependency Injection мы можем передать любой обьект, который отвечает на format и получить отформатированные данные.

Та же история с DataSource. Мы можем передать любой обьект, который отвечает на data и получить отчет на основе этих данных.

Одно небольшое изменение позволило сделать наш генератор отчетов гораздо более гибким, нежели он был в самом начале. Мы избавились от явной зависимости, и вместо этого сделали зависимость динамической, основанной на интерфейсах, а не на названиях классов.

Говоря об интерфейсах, я имею в виду то, что любой класс, который имеет метод format теперь может использоваться как форматтер для отчета, а класс, у которого есть метод data может быть использован как DataSource.

Таким образом мы подготовили систему к будущим изменениям. Если нам нужен новый формат отчета - мы знаем что должны сделать. Мы просто напишем новый класс, который будет отвечать на format. А если заказчик захочет генерировать отчеты на основе данных с другого источника - мы создадим новый класс, который будет вести себя как DataSource и отвечать на метод data.

Система стала гибкой и расширяемой благодаря Dependency Injection.