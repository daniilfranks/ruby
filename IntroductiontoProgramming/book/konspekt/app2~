#http://rubyblog.com.ua

========Три кита ООП: инкапсуляция, наследование и полиморфизм===========

Ruby - это обьектно-ориентированный язык. Если мы хотим понимать идеи заложенные в Ruby - мы обязательно должны знать основы обьектно-ориентированного программирования (ООП). В этом посте я опишу инкапсуляцию и наследование, а полиморфизму посвятим отдельный пост.

Инкапсуляция
Инкапсуляция — свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе.

Класс - это всего лишь набор данных (переменных) и поведения (методов). Каждый класс имеет интерфейс - набор публичных методов.

Инкапсуляция говорит о том, что нам достаточно знать лишь интерфейс класса, чтобы им пользоваться. Мы не должны знать ничего о внутренней структуре класса, чтобы с ним взаимодействовать.

Рассмотрим пример из жизни. Идеальным примером инкапсуляции является калькулятор. Его интерфейс нам понятен сразу и мы не задумываемся о том, как он устроен внутри. Мы знаем, что можно нажать 2+2, затем = и посмотреть на дисплей. Мы увидим 4.

В Ruby мы тоже можем легко узнать интерфейс класса - посмотреть на его публичные методы. Затем найти метод, который нам подходит и посмотреть, какие параметры передать, чтобы получить желаемый результат.

В языках программирования со статической типизацией вы указываете еще и типы параметров, которые принимает функция, а также, иногда, и тип возвращаемого значения.

Ruby - язык с динамической типизацией, поэтому все, что мы можем узнать о методе с первого взгляда - это его имя и количество параметров, которые он принимает. Следует отметить, что именование публичных методов и параметров играет важную роль, так как служит своеобразной документацией метода.

Не следует забывать, что класс должен иметь как можно меньше публичных методов. Это позволит упростить работу с классом и защитить данные от нежелательных изменений со стороны. Все "служебные" методы должны быть приватными. В этом блоге я уже писал о public, private и protected в Ruby, что позволяет контролировать уровень доступа к методам.


Наследование

Наследование — свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым, родительским или суперклассом. Новый класс — потомком, наследником, дочерним или производным классом.

class Human
  def walk
    "Walking"
  end

  def breathe
    "Breathing"
  end
end

class Man < Human
end

class Woman < Human
end

adam = Man.new
adam.breathe # => "Breathing"

eve = Woman.new
eve.breathe # => "Breathing"

Класс Human является родительским классом для классов Man и Woman. Так, как Man и Woman унаследованы от Human, они имеют все методы, которые есть в Human, а именно walk и breathe.

Есть простой способ определить, что использовать - наследование или композицию: он называется is-a vs has-a. Наследование используется, когда вы можете описать связь между родительским и дочерним классом как is-a, например:

Мужчина - это (is-a) Человек
Женщина - это (is-a) Человек
Это утверждение мы отобразили в коде как:

Man < Human
Woman < Human
Рассмотрим другой пример. Супермен - это все еще человек, но он имеет (has-a) суперсилу. Можно использовать композицию:

module Superpower
  def fly
    "Flying!"
  end
end

class Superman < Human
  include Superpower
end

superman = Superman.new
superman.breathe # => Breathing
superman.fly # =>  Flying!

Супермен все еще человек, он ходит (walk) и дышит (breathe), но теперь он имеет (has-a) возможность летать. Благодаря модулю Superpower, который мы добавили в класс.

Еще один пример применения наследования - это ApplicationController в Ruby On Rails приложениях. Обычно создают один родительский контроллер, и все последующие контроллеры наследуют от него. Это позволяет вынести общие методы в родительский класс и не дублировать их в каждом контроллере. Эта связь так же идеально ложится в понятие is-a: Каждый новый контроллер (UsersController, например) - это контроллер приложения (ApplicationController).

Еще несколько слов о наследовании. В некоторых языках есть возможность множественного наследования. Один класс можно унаследовать сразу от нескольких родительских. В Ruby этой возможности нет. Мы можем унаследовать свой класс только от одного родительского класса.

Это было правильным решением, так как множественное наследование в большинстве случаев - зло, которое сильно усложняет понимание программы и указывает на проблемы с дизайном. Если нам необходимо расширить класс дополнительными возможностями - всегда можно воспользоваться миксинами и сделать include модуля, который добавит необходимые методы в класс.

Говоря о наследовании, обязательно нужно упомянуть метод super, который позволяет вызвать родительский метод в дочернем классе. Рассмотрим пример:

class Man
  def power
    10
  end
end

class Superman < Man
  def power
    super * 1.5
  end
end

Superman.new.power # => 15

Супермен унаследован от класса Man. Представим, что у рядового мужчины сила равна 10 условным единицам. Мы хотим сделать так, чтобы Супермен имел силу, которая в полтора раза больше.

В методе power для Супермена нам нужно как-то получить значение power с класса Man. Для этого существует метод super, который вызывает метод родительского класса. В нашем случае получилась такая цепочка:

мы вызвали метод power у экземпляра класса Superman, который унаследован от класса Man
внутри метода power мы вызвали метод super, который вызвал соответсвующий метод в родительском классе (power для Man равняется 10)
полученный результат (10) мы умножили на 1.5
Давайте рассмотрим еще один пример:

class Man
  attr_reader :name

  def initialize(name)
    @name = name  
  end
end

class Hero < Man
  attr_reader :hero_name

  def initialize(real_name, hero_name)
    @hero_name = hero_name
    super(real_name)
  end
end

superman = Hero.new("Clark", "Superman")
superman.name # => Clark
superman.hero_name # => Superman

Класс Man принимает один параметр - name. Также у него есть attr_reader, который делает этот параметр доступным для экземпляра класса Man. У класса Hero, кроме настоящего имени, есть еще и имя героя.

Поэтому при создании экземпляра класса мы передаем не один, как с случае с классом Man, а два параметра. Также, нам нужно вызвать initialize в родительском классе Man. Если мы этого не сделаем - то переменная @name не будет установлена и superman.name вернет nil. Как мы уже знаем, чтобы вызвать метод в родительском классе мы воспользуемся методом super и передадим ему имя.

На собеседованиях любят задавать вопрос: в чем разница между super и super()?

Покажем на примере:

class Man
  def initialize(name)
    puts name.inspect
  end
end

class Hero < Man
  def initialize(name)
    super
  end
end

Hero.new("Clark") # => Clark

Если вызвать super в дочернем классе и явно не передать никаких параметров, он возьмет параметры, с которыми был вызван метод дочернего класса и передаст их в родительский. В нашем случае вызов super равен вызову super(name). И по результату выполнения кода мы действительно видим, что name передается в метод Man#initialize.

Если же мы хотим вызвать родительский метод, но не хотим передавать в него параметры дочернего метода - мы можем воспользоваться такой формой записи: super(). Этот код вызовет родительский метод, но не передаст в него никаких параметров.

class Man
  def foo
    puts "I don't need params"
  end
end

class Hero < Man
  def foo(param)
    puts "I need a param"
    super()
  end
end

Hero.new.foo("Param")
# => I need a param
# => I don't need params

Если вызвать super без (), то он попытается пробросить параметр param в метод родительского класса и получим ошибку

Сразу скажу, что различают несколько типов полиморфизма, но мы будем исходить из следующего определения:

Полиморфизм подтипов (в ООП называемый просто «полиморфизмом») — свойство системы, позволяющее использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.

На практике, даже в рамках данного блога, мы видели применение полиморфизма не один раз. Давайте рассмотрим еще несколько примеров.

Пример №1
Представим, что у нас есть система, которая загружает файлы пользователя на Dropbox, GDrive или iCloud.

Мы получили код, который наши предыдущие коллеги написали без использования полиморфизма.

Код выглядит как-то так:

class Dropbox
 def upload_file(file)
  # ...
 end
end

class Gdrive
  def upload(file)
    # ...
  end
end

class Icloud
  def send(file)
    # ...
  end
end

class Uploader
  def upload(channel, file)
    case channel
    when "dropbox"
      Dropbox.new.upload_file(file)
    when "gdrive"
      Gdrive.new.upload(file)
    when "icloud"
      Icloud.new.send(file)
    else
      "Can not send file through #{channel}"
    end
  end
end

У нас есть 3 класса под каждый канал отправки файла, а также класс Uploader, который знает, как нужно отправлять файл через каждый из каналов.

Рассмотрим, какие проблемы есть у данного подхода. Первое, что бросается в глаза - это некрасивый код класса Uploader. Второе заметное упущение - это названия методов в классах. Все они делают одно и то же действие, но в каждом классе названы по-разному: Dropbox#upload_file, Gdrive#upload, Icloud#send.

Первая часть определения полиморфизма гласит о том, что это: "свойство системы, позволяющее использовать объекты с одинаковым интерфейсом..."

Если мы хотим использовать полиморфизм - то нам нужны обьекты, которые имели бы одинаковый интерфейс. Ок, начнем рефакторинг с того, что сведем все методы, которые загружают файлы к единому интерфейсу:

class Dropbox
  def upload(file)
    # ...
  end
end

class Gdrive
  def upload(file)
    # ...
  end
end

class Icloud
  def upload(file)
    # ...
  end
end

Отлично, теперь все три класса имеют одинаковый интерфейс - им можно отправлять сообщение .upload(file).

Это, в свою очередь, позволяет нам переписать и код класса Uloader:

class Uploader

  AVAILABLE_CHANNELS = {
    "dropbox" => Dropbox,
    "gdrive" => Gdrive,
    "icloud" => Icloud
  }.freeze

  def upload(channel, file)
    return "Can not send file through #{channel}" unless AVAILABLE_CHANNELS.keys.include?(channel)

    AVAILABLE_CHANNELS[channel].new.upload(file)
  end
end

Uploader знает какой канал загрузки соответствует какому классу (хеш AVAILABLE_CHANNELS), выбирает его и просто вызывает метод .upload(file) у экземпляра соответствующего класса. Теперь это действительно полиморфизм, так, как мы вызываем метод "без информации о типе и внутренней структуре объекта".

Ведь действительно, строка AVAILABLE_CHANNELS[channel].new.upload(file) не знает на момент создания метода, для какого именно класса она вызовет .new.upload(file). Так, как это зависит от того, через какой канал захочет загрузить файл пользователь.

Также, класс Uploader не знает ничего о внутренней имплементации каждого из аплоадеров. Ему достаточно знать то, что все они имеют единый интерфейс - отвечают на вызов .upload(file).

Теперь код выглядит лучше. Классы каналов загрузки имеют единый интерфейс, чем успешно пользуется основной класс Uploader. Мы провели рефакторинг и сделали систему более гибкой благодаря полиморфизму.

Пример №2
Второй пример будет связан с отчетами. Допустим, наша система имеет определенное количество отчетов:

class SalaryReport
  def rows
    3
  end

  def expenses
    19000
  end
end

class SystemReport
  def rows
    40
  end

  def expenses
    8000
  end
end

Логику подсчета я убрал, и просто подставил готовые значения, чтобы упростить пример. Итак, у нас есть отчет по заработной плате и по системе. Все отчеты имеют единый интерфейс - методы rows и expenses. Наша задача написать класс, который бы возвращал сводный отчет по тем отчетам, которые мы имеем.

Как вы уже догадались, мы используем полиморфизмом:

class SummaryReport

  def self.summary(reports)
    return if reports.empty?

    reports.each_with_object({ expenses: 0, rows: 0}) do |report, result|
      result[:rows] += report.rows
      result[:expenses] += report.expenses
    end
  end

end

reports = [SalaryReport.new, SystemReport.new]
SummaryReport.summary(reports) # => {:expenses=>27000, :rows=>43}

Разберем этот пример: Метод SummaryReport.summary принимает массив отчетов, по которым мы хотим построить итоговый репорт, затем проходит по каждому из них и вызывает методы rows и expenses, сохраняя сумму в результирующий хеш.

Снова мы пользуемся тем, что все репорты имеют единый интерфейс и SummaryReport даже не знает, с какими типами классов он имеет дело. Все что ему достаточно знать - что он может спросить report о его затратах и количестве строк.

Если код выглядит немного сложным из-за each_with_object - о нем можно почитать в одной из моих предыдущих заметок.

В этом коде есть один момент, который мне не нравится. Класс SummaryReport знает о том, какие методы имеет каждый репорт. Они там явно указаны. Мы можем сделать это решение более гибким и передавать в SummaryReport те поля, которые хотим получить в итоговом отчете.

class SummaryReport

  def self.summary(reports, fields = [:expenses, :rows])
    return if (reports.empty? || fields.empty?)

    results = Hash.new(0)

    reports.each do |report|
      fields.each { |field| results[field] += report.send(field) }
    end

    results
  end

end

reports = [SalaryReport.new, SystemReport.new]
SummaryReport.summary(reports) # => {:expenses=>27000, :rows=>43}

Результат остался неизменным, но метод теперь позволяет легко конфигурировать и отчеты и поля, которые мы хотим получить в итоговом отчете. Например, теперь мы можем сделать так:

reports = [SalaryReport.new]
SummaryReport.summary(reports, [:expenses]) # => {:expenses=>19000}

Передать только один репорт и вытащить с него лишь поле expenses. Или получить только общее количество записей в двух репортах:

reports = [SalaryReport.new, SystemReport.new]
SummaryReport.summary(reports, [:rows]) # => {:rows=>43}

Давайте рассмотрим код, который позволил добиться столь гибкого результата:

Метод .summary принимает два параметра: массив отчетов reports и поля, по которым мы хотим получить сумму. Дефолтное значение - массив из двух полей: [:expenses, :rows].

Первая строка - так называемый guard clause:

return if (reports.empty? || fields.empty?)

Она прерывает выполнение метода если он был вызван без указания репортов или полей.

Далее идет обьявление хеша, который будет содержать результаты:

results = Hash.new(0)

Обьявляя таким образом хеш, мы говорим что дефолтное значение для каждой новой пары ключ-значение будет равно нулю. Это необходимо для того, чтобы код, например, results[:foo] += 10 отработал без ошибок.

После этого идет основной блок кода:

reports.each do |report|
  fields.each { |field| results[field] += report.send(field) }
end

Он проходит по всем репортам, затем запускает цикл по тем полям, которые мы хотим получить в итоговом отчете. Для каждого отчета и поля вызывается этот код:

results[field] += report.send(field)

В хеш results суммируется результат вызова метода для репорта. Например если field = :rows, то можно сказать, что эта строка трансформируется в: 

results[:rows] += report.rows

Так, как метод send(:method) позволяет вызвать метод у обьекта. Мы пользуемся этой возможностью и динамически вызываем то поле, которое нам нужно для отчета.

Этот код может показаться немного сложным, но если в нем разобраться - он выглядит весьма логичным и супергибким.

Итак, повторим еще раз: полиморфизм - свойство системы, позволяющее использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта.

Мне кажется полиморфизм - это весьма важное свойство ООП, которое при должном применении позволяет создавать гибкие системы. Как мы убедились на примерах - обьекты, которые имеют единый интерфес позволяют классам, которые с ними работают не иметь никаких знаний об их внутреннем устройстве. Имея одинаковый интерфейс, но разную имплементацию - методы можно вызывать динамически.