=begin
Каждое выражение и каждый объект в Ruby имеет булево значение, 
что означает, что каждый объект и каждое выражение оцениваются 
как true или как false. Это делает true и false довольно специфическими 
значениями в языке Ruby. При всем при этом, true и false являются не 
просто значениями, а объектами Ruby.

Объекты True и False
Вы, наверняка, знаете, что true и false — это зарезервированные слова Ruby,
 что означает, что вы не сможете использовать их как имена для переменных 
 или методов. Но помимо этого, оба true и false также являются абсолютно 
 полноценными объектами. Ruby имеет 2 специальных класса от которых 
 происходят эти объекты, а именно:

TrueClass
и
FalseClass

и оба объекта true и false являются единственными экземплярами этих 
классов. Ruby не позволит вам создать несколько экземпляров этих классов.
Каждое выражение в Ruby оценивается объектом и каждый объект в свою 
очередь может использоваться в условном выражении, что значит, что каждый
объект в конечном счете должен оцениваться булевым значением.
=end

p "Hello" if :hello
p "4" if 4
p "false" if false
p "false" if nil

=begin
Попробуйте  это сами с любым выражением или объектом Ruby.
Также можно убедиться в том, что значения true и false  
являются одними и теми же объектами (мы получаем тот же экземпляр 
TrueСlass или FalseClass), для этого нам  необходимо лишь узнать 
каким id обладает тот или иной объект. Вы наверняка заметите, что 
для объектов true в равной степени, как и для объектов false, 
id будет всегда одинаковым. Более того, id объекта false всегда 
будет равен 0, а id объекта true всегда будет равен 2, например:
=end

p true.object_id
p false.object_id

=begin
Таким образом, теперь мы знаем, что: каждое выражение в Ruby 
оценивается объектом, и каждый объект имеет булево значение. 
Булевы значения это всегда копии класса TrueClass или FalseClass и 
благодаря этому имеют всегда один и тот же id объекта. 
Многие объекты в Ruby будут иметь булево значение true, 
и только два объекта имеют булево значение false, это собственно 
объект false и объект nil.


Объект Nil
Объект nil – еще одна особенность Ruby. Nil — такой же объект, 
как и любой другой. Объект nil является экземпляром особого 
класса — NilClass. Я выше уже упоминал о том, что nil это один из двух 
объектов в Ruby, которые обладают булевым значением false.

Так же как  true и false, у всех объектов nil  id будет одинаковым. 
Id объекта nil всегда равен 4:
=end

p nil.class
p nil.object_id

=begin
Самое интересное, что с помощью объекта nil в Ruby можно частично 
реализовать паттерн Null Object прибегая к минимальным усилиям. 
Объект nil уже снабжен некоторыми методами для того, чтобы вы могли его 
использовать при этом не получая надоедливых сообщений об ошибках в 
случаях, когда выполнение определенного фрагмента кода в результате 
возвратит  nil. Именно поэтому объект nil ассоциируется и преобразуется 
в пустую строку, пустой массив, хэш или число 0.
=end

p nil.to_i
p nil.to_s
p nil.to_a

=begin 
Из-за того, что вы можете всегда добавлять методы к экземплярам классов 
в Ruby, а объект nil всегда является единственным экземпляром, вы можете
добавить к объекту nil интересные методы, так что ваш код будет 
использовать nil в качестве Null Object
=end

def nil.quack
	p "quack"
end

nil.quack

=begin 
Сейчас если исполняется код с объектами, которые умею крякать  
как утки и работа происходит с объектом nil вместо объекта DuckLike, 
то в этом случае ваш модернизированный объект nil сможет крякнуть 
что-то разумное о причине неработоспособности объекта DuckLike 
(или вывести ошибку, если это предпочтительно).

Я думаю это довольно мощный материал. Паттерн NullObject  
уже как бы встроен в язык, вам только необходимо использовать его в 
своих целях.
=end