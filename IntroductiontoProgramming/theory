Что есть Объектно-ориентированное программирование?
Объектно — ориентированное программирование — это программирование основанное на использовании объектов — экземпляров абстрактных типов (классах). Объект в ООП — это программная модель какого-то реально существующего объекта, например вас или меня, при этом будучи объектами реального мира мы будем являться экземплярами некоторого типа (вида) — Человека Разумного. Объекты являющиеся экземплярами одного класса называются родственными или братьями, а класс от которого они произошли, если провести аналогию, является шаблоном ДНК человека в котором описываются все общие моменты производных объектов, однако каждый объект может иметь свои отличия от другого объекта того же типа. 
Все люди одинаковые в том, что имеют две ноги, два глаза, однако у всех людей различается цвет глаз, отпечатки пальцев, имя, характер, лицо. Не смотря на эти различия между людьми, мы все-таки отличаем других людей, скажем от макак или павианов. Все общее в людях и общий набор свойств определяется в классе, а все различное определяется в самих объектах.
ООП является значительным шагом в перед, который позволяет писать программисту не просто код, а описывать реальную модель взаимодействия объектов. Объектно — ориентированное программирование повышает читабельность кода за счет его систематизации и сходства с тем, как человек мыслит и представляет мир.

Три кита объектно-ориентированного программирования: Инкапсуляция, Наследование, Полиморфизм

Что есть Инкупсуляция?
Инкапсуляция — это меньший кит объектно-ориентированного программирования. Инкапсуляция заключается в том, что присущие функциональному программирования данные и функции над ними превратились в свойства и методы объекта, которые заключены в объект. 
Доступ к этим свойствам и методам доступен только через специально определяемые интерфейсы. Эти интерфейсы называются геттеры и сеттеры. Геттеры получают значение, а сеттеры устанавливают.

Таким образом скрывается внутреннее устройство объекта. Если вы заходите покушать, вам не нужно знать все методы вашего организма по перевариванию пищи. Все, что вам нужно — это воспользоваться специальным интерфейсом — ртом, передать туда пищу(установить значение), все, внутренние методы вашего организма запустятся сами, взаимодействия с этим одним единственным интерфейсом (методом — аксессором, от access — доступ). 

Ваши свойства, как экземпляра Хомо Сапиенса, это размеры элементов вашего тела, цвет кожи, цвет глаз, родинки и веснушки, ваше имя и фамилия, ваше физическое,  духовное и психологическое состояние. Вы хороший, здоровый, темноглазый, бледнолицый, девяносто килограммовый и сто-восьмидесяти сантиметровый Иван — и все, что я перечислил — это ваши свойства. 

Ваши методы — это ходьба, бег, употребление пищи, сон, чтение, писание, программирование и так далее. 
Свойства к которым можно получить доступ называются открытыми, открыты они не из-за какой-то своей особенности, а из-за того, что для них определены методы — аксессоры. 

Метод initialize позволяет задать свойства объекту при его создании(при использовании метода new). Где свойства передаем как хеш значений.

Можно использовать упрошенное создание геттеров и сеттеров
attr_reader
attr_writer
attr_accessor


Что есть Наследование
Наследование — следующий кит ООП, тем не менее он очень важен. Наследование заключается в передачи всей структуры одного класса в другой, иными словами это просто копирование одного класса в другой. Но тут еще один важный момент, что наследование позволяет создавать дополнительные свойства, не доступные классу от которого произошло наследование.Наследование — очень полезная вещь, так как: предоставляет возможность повторного использования кода, спасает от повторений в коде. 

Полиморфизм — все изменяется
Полиморфизм — самый жирный кит объектно-ориентированного программирования, который тесно связан с китом наследования и делает наследование еще более мощным. Полиморфизм (поли — много, морфе — форма) заключается в том, что наследуясь, в классе — потомке (дочернем классе или подклассе или субклассе или …) вы можете переопределять унаследованные свойства и методы. Иными словами, свойства объектов с одинаковой спецификацией(наследованием) могут иметь различную реализацию.

Другим объектам при взаимодействии не важно какого класса объект(родитель или наследник) с которым они имеют взаимодействие. Важно, что он имеет тот интерфейс, который от него ожидают.

Все эти различия создает полиморфизм!
Также ключевое слово super возвращает свойства из родительского класса. Мы сами определяем, какие свойства нужны наследнику, а какие нет!


Область видимости — это способность переменной быть использованной в контексте определенного фрагмента кода. Класс, объект, процедура, метод, код, вложенный в блоки условных операторов и циклов — все это может быть областью видимости. 

В Ruby существует 5 типов переменных:
variable — локальная переменная, она доступна только в той области видимости, где была определена, а также во всех вложенных областях видимости.

@variable - переменная объекта (экземпляра класса), имена таких переменных должны начинаться с одного знака @ — это еще одно соглашение в Ruby, которое вы обязаны знать. переменные экземпляра класса доступны только в том объекте, где они определены и вложенных в него областях видимости. 

@@variable — переменная класса, имена таких переменных должны начинаться с двух символов @. Их область видимости — класс в котором они определены и все экземпляры данного класса.

$variable — глобальные переменные, их имена должны начинаться с символа $, а область видимости — вся программа.

CONST - константы это не переменные, но предназначение похожее — хранить ссылку на объект. Имена констант должны начинаться с большой буквы. Область видимости константы такая же как и у глобальной переменной, единственное отличие заключается в том, что значение константы следует использовать для «статики». При попытке изменить значение константы, значение будет изменено, однако будет возвращено предупреждение. В большинстве других языков программирования константы не могут переопределяться.

Создавая объект (экземпляр класса) нам необходимо воспользоваться методом .new. Метод .new принимает аргументы для создания класса, которые затем могут быть использованы в методе #initialize и создает новый объект.

Строки — это произвольной длины наборы символов, которые заключены в одинарные или двойные кавычки. 
Вы можете объявлять строки используя специальный идентификатор строки %q

Строки заключенные в двойные кавычки могут содержать выполняемые фрагменты кода, а также специальные символы, например тот же символ новой строки. Помещенный в строку код будет выполнен и на его место в строке будет вставлено возвращенное им значение. Код, который вы желаете поместить в строку следует заключить в фигурные скобки перед которыми должен следовать символ шарп — #{здесь ваш код}
Если вы не желаете, чтобы что-то помещенное в #{} выполнялось как код и чтобы специальные символы содержащиеся в строке игнорировались, вам следует либо использовать одинарные кавычки для заключения в них строки, либо экранировать те фрагменты строки, заключенной в двойные кавычки, которые могут выполняться. Экранирование происходит при помощи символа обратного слэша «\», примеры:

В Ruby практически все за редким исключением является объектом и строки не исключение. Строковый объект носит тип String, то есть является экземпляром класса String. Это означает, что строка, как и любой другой объект имеет собственные методы, некоторые из которых вы уже видели в примерах выше. Чтобы убедиться в том, является ли что-то объектом, достаточно попытаться вызвать у этого «чего-то» метод #class. Метод #class не возвращает сообщение «Эта штуковина — объект», он возвращает класс (тип), которому принадлежит объект. Если что-то не является объектом, то и не имеет методов вообще.

Обратите внимание на то, что строка не изменилась, метод #upcase просто возвратил новую строку. Для того, чтобы изменить саму строку для которой был вызван метод нужно использовать BANG-методы. 
BANG-методы, это такие методы, которые изменяют сам объект, для которого они вызываются. В них нет ничего особого, кроме имени. Для BANG — методов желательно, но не обязательно давать имена, который заканчиваются на «!», в нашем случае это метод #upcase!


Числовой объект в отличие от строкового может имеет 4 типа: Fixnum, Bignum, Complex и Float. Fixnum и Bignum используются для представления целых чисел и практически идентичны за исключение того, что Bignum используется для хранения более больших чисел, этот тип данных просто огромен.

Диапазоны — это особый тип данных в Ruby, который является достаточно уникальным, поскольку далеко не в каждом языке он существует и достаточно полезный, диапазоны упрощают код.

Диапазон заключается в круглые скобки, и состоит из минимума и максимум, которые разделены двумя или тремя точками, ниже приведен простые примеры диапазонов:

Диапазон является самостоятельным типом данных, который принадлежит классу Range
Диапазоны не богаты на методы и методы для диапазонов используются достаточно редко, за исключением метода to_a, который преобразует диапазон в массив.

Массив это множество значений элементов соединенных вместе, упорядоченные, где каждый элемент может быть разного типа данных: строка, символы, интервалы, числа.
Массив представляет собой банковский сейф, где каждый элемент хранится в собственном бронированном ящике доступ к которому можно получить только имея ключ. Таким образом, данные представленные в массиве имеют парную структуру ключ — значение. 

По ключам идет упорядочивание массива. Отсчет ключа массива начинается с 0. Это важно запомните. 
Следовательно в массиве из 10 значений ключи будут (0-9)
Еще стоит заметить, что ключей (индексов) у каждого элемента массива имеется целых два: левосторонний и правосторонний, как и у строк.

Элементы массивов, сортируются по ключам, то есть чем меньше ключ, тем значение ближе к началу массива, а чем ключ больше, тем ближе к концу.

Прежде, чем мы окунемся в основные методы для работы с массивами, хочу разобрать с вам такой синтаксис объявления массивов, как идентификатор массива %w, который очень похож на то, с чем уже познакомились изучая строки — идентификатором строки %q и другими способами создания массива. Идентификатор массива %w так же позволяет использовать любые пары символов, кроме букв и чисел для помещения в них содержимого массива. 

Использование синтаксиса объявления массива с идентификатором %w подходит в тех случаях, когда вы пытаетесь поместить в массив некоторую последовательность элементов разделенных одним лишь пробелом, при этом каждый элемент массива созданного в такой способ будет иметь строковый тип


Итераторы - это методы которые принимают блок, используются вместо циклов, потому что они более компактны и функциональны. 
Находятся в модуле Enumerable.
Enumerable предоставляет очень мощные методы для работы с массивами и хешами, которые называются итераторами.

Итератор — это метод, который обходит коллекцию поэлементно выполняя с каждым элементом определенную операцию. Если быть совсем честным, то итератор, в большинстве случаев не сам выполняет работу, а передает каждый элемент коллекции в блок кода, где, чаще всего и происходит основная работа. Запомните итераторы повышают читаемость кода.

Существует два вида как обозначается блок.
Если блок однострочный, то используют фигурные скобки { }
Если блок будет содержать несколько строк кода, то используют конструкцию do ... end
times upto step each 

Ассоциативный массив, или хеш — это очень удобная структура данных, которая предоставляет с собой как и массив парную структуру, но ключ не упорядочен и может принимать любое значение. 
Все хеши имеют тип Hash, то есть являются экземплярами класса Hash
Символы — это специфичные строки, которые в программе id указывается один раз и на всегда. 

Булевы типы данных True и False также являются объектами, экземплярами классов TrueClass и FalseClass, в Ruby к ним также относят значение nil, которое является экземпляром класса NilClass и интерпретируется как значение false, это сделано из расчета на то, чтобы мочь показать в коде не просто «ЛОЖЬ», но и «ПУСТОТУ» и при необходимости, при возвращении этих двух значений, производить различные действия.

Условные операторы - это специальные операторы, которые выполняют код в зависимости от условия. 
Бывают в двух состояниях, если условие выполняется(true), если условие не выполняется(false)
В ruby существует всего два условных оператора if и case, а также присутствует тернарный оператор.

Метод — это определенное действие объекта.

Методы свойственны только объектно-ориентированному программированию. Метод это один из многих способов структурирования кода, служит чтобы действие объекта вынести отдельно и использовать несколько раз.

Методы

Объявление метода происходит при помощи выражения def после которого следует имя метода и перечень аргументов необходимых для него
Для методов не нужно явно указывать возвращаемое значение, они вернут результат выполнения посленей строки своего кода, однако иногда полезно явно указывать возвращаемое значение, при помощи выражения return. 
Это явное указание методу, что нужно вернуть. Еще return следует использовать тогда, когда вас не устаивает то, что метод возвращает результат выполнения последней строки.
